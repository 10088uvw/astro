---
import { renderMarkdown } from '@astrojs/markdown-remark';
import { dedent } from './utils.js';

// export interface Props {
//   content?: string;
// }

// // Internal props that should not be part of the external interface.
// interface InternalProps extends Props {
//   $scope: string;
// }

// const { content, $scope } = Astro.props as InternalProps;
// let html = null;

// // This flow is only triggered if a user passes `<Markdown content={content} />`
// if (content) {
//   const { content: htmlContent } = await renderMarkdown(content, {
//     mode: 'md',
//     $: {
//       scopedClassName: $scope
//     }
//   });
//   html = htmlContent;
// }

const { content = await $$slots.default() } = Astro.props;
let markdown = typeof content === 'string' ? content : await content.render();
markdown = dedent(markdown);

let html: string;
try {
  ({ code: html } = await renderMarkdown(markdown));
} catch (e) {
  console.log(e)
}
---
{html}
